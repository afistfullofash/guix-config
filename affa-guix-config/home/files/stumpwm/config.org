#+TITLE: StumpWM Config
#+PROPERTY: header-args:lisp :tangle init.lisp :exports both :eval never
* Initial Config
  Start slynk for debugging purposes first and then load in our required stumpwm contrib modules
  #+begin_src lisp
    (in-package :stumpwm-user)
    (asdf:require-system :slynk)
    (slynk:create-server :port 1337
    		     :dont-close t)

    (setq *startup-message* (format nil "Welcome Natalie!"))

    (asdf:load-system "local-time")
    (asdf:load-system "pamixer")
    (asdf:load-system "battery-portable")
  #+end_src
* Visual
** Themeing
   This is a quick themeing system for stumpwm with a couple of theme options.

*** General Functions
#+begin_src lisp
      (defvar *theme-type-env-name* "AFFOA_SYSTEM_THEME_TYPE")

      (defun set-system-themeing ()
        (let ((system-theme (getenv *theme-type-env-name*)))
          (if (equal "dark" system-theme)
      	(apply-theme (gethash 'dracula *themes*))
      	(apply-theme (gethash 'gruvbox-light *themes*)))))

      (defun toggle-system-themeing ()
        (if (equal (getenv *theme-type-env-name*) "dark")
            (setf (getenv *theme-type-env-name*) "light")
            (setf (getenv *theme-type-env-name*) "dark"))
        (set-system-themeing)
        (toggle-modeline-all-screens)
        (toggle-modeline-all-screens))
#+end_src
*** Basic StumpWM Themeing Sytem 
    This gives us some very general functions to generate and apply /themes/ with.
    
    #+begin_src lisp
            ;;; Visual
      (defvar *themes* (make-hash-table))
      (defun add-theme (name theme)
        (setf (gethash name *themes*) theme))

            ;;; Colors based off spacemacs-dark-theme for emacs
      (defclass theme ()
        ((fg
          :initarg :fg
          :initform "White"
          :type string)
         (bg
          :initarg :bg
          :initform "Black"
          :type string)

         (border
          :initarg :border
          :initform "White"
          :type string)

         (focus
          :initarg :focus
          :initform "White"
          :type string)
         (unfocus
          :initarg :unfocus
          :initform "Black"
          :type string)

         (mode-line-fg
          :initarg :mode-line-fg
          :initform *mode-line-foreground-color*
          :type string)
         (mode-line-bg
          :initarg :mode-line-bg
          :initform *mode-line-background-color*
          :type string)
         (mode-line-border
          :initarg :mode-line-border
          :type string)
         
         ;; These are the default colors of *colors* in order
         (black
          :initarg :black
          :initform "black"
          :type string)
         (red
          :initarg :red
          :initform "red"
          :type string)
         (green
          :initarg :green
          :initform "green"
          :type string)
         (yellow
          :initarg :yellow
          :initform "yellow"
          :type string)
         (blue
          :initarg :blue
          :initform "blue"
          :type string)
         (magenta
          :initarg :magenta
          :initform "magenta"
          :type string)
         (cyan
          :initarg :cyan
          :initform "cyan"
          :type string)
         (white
          :initarg :white
          :initform "white"
          :type string)))

      (defun apply-theme (theme)
        (set-fg-color (slot-value theme 'fg))
        (set-bg-color (slot-value theme 'bg))
        (set-border-color (slot-value theme 'border))
        (set-focus-color (slot-value theme 'focus))
        (set-unfocus-color (slot-value theme 'unfocus))

        (setf *mode-line-foreground-color* (slot-value theme 'mode-line-fg)
            	,*mode-line-background-color* (slot-value theme 'mode-line-bg)
            	,*mode-line-border-color* (slot-value theme 'mode-line-border))
        
        (setf (nth 0 *colors*) (slot-value theme 'black)
      	(nth 1 *colors*) (slot-value theme 'red)
      	(nth 2 *colors*) (slot-value theme 'green)
      	(nth 3 *colors*) (slot-value theme 'yellow)
      	(nth 4 *colors*) (slot-value theme 'blue)
      	(nth 5 *colors*) (slot-value theme 'magenta)
      	(nth 6 *colors*) (slot-value theme 'cyan)
      	(nth 7 *colors*) (slot-value theme 'white))
        (update-color-map (current-screen)))
    #+end_src
*** Spacemacs
    #+begin_src lisp
      (add-theme 'spacemacs
      	   (let ((grey "#292b2e")
      		 (purple "#5d4d7a"))
      	     (make-instance 'theme
      			    :fg purple
      			    :bg grey
      			    :border purple
      			    :focus purple
      			    :unfocus grey
      			    :mode-line-fg purple
      			    :mode-line-bg grey
      			    :mode-line-border purple
      			    :black grey
      			    :white purple)))

    #+end_src
*** Gruvbox
    #+begin_src lisp
      (add-theme 'gruvbox
      	   (let ((fg "#ebdbb2")
      		 (bg "#282828")
      		 (border "#665c54"))
          	     (make-instance 'theme
          			    :fg fg
          			    :bg bg
          			    :border border
          			    :focus fg
          			    :unfocus bg
          			    :mode-line-fg fg
          			    :mode-line-bg bg
          			    :mode-line-border border
          			    :black bg
      			    :white fg)))

      (add-theme 'gruvbox-light
      	   (let ((fg "#3c3836")
      		 (bg "#fbf1c7")
      		 (border "#d65d0e"))
          	     (make-instance 'theme
          			    :fg fg
          			    :bg bg
          			    :border border
          			    :focus fg
          			    :unfocus bg
          			    :mode-line-fg fg
          			    :mode-line-bg bg
          			    :mode-line-border border
          			    :black bg
      			    :red "#cc241d"
      			    :green "#98971a"
      			    
      			    :yellow "#d79921"
      			    :blue "#458588"
      			    :magenta "#b16286"
      			    :cyan "#689d6a"
      			    :white fg)))
    #+end_src
*** Dracula
    #+begin_src lisp
      (add-theme 'dracula
      	   (let ((fg "#F8F8F2")
      		 (bg "#282A36")
      		 (border "#8BE9FD")
      		 (purple "#BD93F9"))
      	     (make-instance 'theme
      			    :fg fg
      			    :bg bg
      			    :border purple
      			    :focus border
      			    :unfocus purple
      			    :mode-line-fg purple
      			    :mode-line-bg bg
      			    :mode-line-border purple
      			    :black bg
      			    :white fg)))
    #+end_src
** Configuration
   #+begin_src lisp
     (set-system-themeing)

     (run-shell-command "feh --bg-fill --no-xinerama ~/.background.jpg")

     (setq stumpwm:*input-window-gravity* :center
           stumpwm:*message-window-gravity* :center
           
           stumpwm:*message-window-padding* 10
           stumpwm:*message-window-y-padding* 10)
   #+end_src
   
*** Notify
    Currently the stumpwm package built from systems/base.scm cannot load the notify package.
    So this is chucked into a function while I debug it.
    #+begin_src lisp
      (defun start-notify ()
        (asdf:load-system "notify")
        (notify:notify-server-toggle))
    #+end_src
*** Mode Line
    #+begin_src lisp
      (defvar *show-mode-line-time* t)

      (setf *window-format* "%n %10c |")
      (defun trimmed-shell-command (command)
        (string-trim '(#\Space #\Newline #\Tab #\Linefeed #\Return)
      		       (run-shell-command command t)))

      (setf *screen-mode-line-format*      
            (list
             '(:eval (if *show-mode-line-time* "^R %d ^r " ""))
             '(:eval (if (equal (getenv "GUIX_HOME_SYSTEM_FORMAT") "laptop")
      		   "%B | "))
             '(:eval (let ((email-count (trimmed-shell-command "notmuch count +tag:unread -tag:promotion")))
      		 (if (> 0 email-count)
      		     (format nil "~a Emails | " email-count)
      		     "")))
             "%W"))



      ;;; When windows are desroyed window numbers are not synced
      ;;; 2kays <https://github.com/2kays> posted a solution on
      ;;; the TipsAndTricks section of the wiki
      ;;; This will repack window numbers every time a window is killed
      (stumpwm:add-hook stumpwm:*destroy-window-hook*
                        #'(lambda (win) (stumpwm:repack-window-numbers)))

      (defun toggle-modeline-all-screens ()
        ;; Turn on the modeline
        (mapcar (lambda (head)
      	    (toggle-mode-line (current-screen) head))
      	  (screen-heads (current-screen))))

      (toggle-modeline-all-screens)
    #+end_src
* User functions
  #+begin_src lisp
      (defun make-percent-bar (percent &optional title)
        "Return a string that represents a percent bar"
        (format nil "~a~%^B~3d%^b [^[^7*~a^]]"
                title
      	  percent
      	  (stumpwm::bar (min 100 percent) 50 #\# #\:)))

    (defun reload-init ()
         "Restart Slynk and reload source.
       This is needed if Sly updates while StumpWM is running"
         (slynk:stop-server 1337)
         (loadrc)
         (slynk:create-server :port 1337
       		       :dont-close t))


     
  #+end_src
* Commands
** Brightness
   #+begin_src lisp
     (defun show-screen-brightness ()
       (stumpwm:message (make-percent-bar
     		    (parse-integer (run-shell-command "sudo brillo -G" t) :junk-allowed t)	    
     		    "Screen Brightness")))

     (defcommand screen-brightness-up () ()
     	    "Increase the brightness of the screen"
     	    (run-shell-command "sudo brillo -A 10")
     	    (show-screen-brightness))

     (defcommand screen-brightness-down () ()
     	    "Decrease the brightness of the screen"
     	    (run-shell-command "sudo brillo -U 10")
     	    (show-screen-brightness))  

     (defun show-keyboard-brightness ()
       (stumpwm:message (make-percent-bar
     		    (parse-integer (run-shell-command "sudo brillo -Gk" t) :junk-allowed t)
     		    "Keyboard Brightness")))

     (defcommand keyboard-brightness-up () ()
     	    "Increase the brightness of the keyboard"
     	    (run-shell-command "sudo brillo -kA 10")
     	    (show-keyboard-brightness))

     (defcommand keyboard-brightness-down () ()
     	    "Decrease the brightness of the keyboard"
     	    (run-shell-command "sudo brillo -kU 10")
     	    (show-keyboard-brightness))

   #+end_src
** Screenshots
   #+begin_src lisp
     (defun timestamp-string ()
       (local-time:format-timestring
        nil (local-time:now)
        :format '(:YEAR "-" (:MONTH 2) "-" :DAY "-" :SHORT-WEEKDAY "-" :HOUR12 "_" :MIN "_" :SEC "_" :AMPM)))

     (defparameter *screenshot-path*
     	      (format nil "~a/Pictures/Screenshots/~a.png"
     		      (getenv "HOME")
     		      (timestamp-string)))

     ;; Setup bindings for less common aplications which would be opened then closed
     (defcommand screenshot () ()
     	    "Take a screenshot and save it to screenshot directory"
     	    (run-shell-command (format nil "maim ~a"
     				       ,*screenshot-path*)))

     (defcommand screenshot-select () ()
     	    "Select a area for a screenshot and save it to screenshot directory"
     	    (run-shell-command (format nil "maim --select ~a"
     				       ,*screenshot-path*)))
   #+end_src
** Volume
   #+begin_src lisp
     (setf pamixer:*allow-boost* t)  

     (defun show-volume-bar ()
       "Display a stumpwm:message of the current volume"
       (stumpwm:message (make-percent-bar (pamixer:get-volume) "Volume")))

     (defcommand notify-volume-up () ()
     	    (run-commands "pamixer-volume-up")
     	    (show-volume-bar))

     (defcommand notify-volume-down () ()
     	    (run-commands "pamixer-volume-down")
     	    (show-volume-bar))

     (defcommand volume-control () ()
     	    "Start volume control"
     	    (run-or-raise "pavucontrol" '(:class "Pavucontrol")))
   #+end_src
** Theme
   #+begin_src lisp
     (defcommand toggle-theme () ()
          	    "Toggle the system theme"
          	    (toggle-system-themeing))
#+end_src
** System
      #+begin_src lisp
        ;;; Shutdown and Reboot
        (defcommand shutdown (confirm) ((:y-or-n "Confirm Shutdown "))
        	    "Ask for the user to confirm before shutting down."
        	    (if confirm
        		(run-shell-command "sudo shutdown")))

        (defcommand reboot (confirm) ((:y-or-n "Confirm Reboot "))
        	    "Ask for the user to confirm before rebooting."
        	    (if confirm
        		(run-shell-command "sudo reboot")))

        (defcommand reload-init (confirm) ((:y-or-n "Confirm Reloading init file "))
          "Ask for the user to confirm before reloading init file."
        	    (if confirm
        		(reload-init)))
   #+end_src
** Misc
   #+begin_src lisp
     (defcommand user-switch-to-screen (screen-num) ((:number "Screen Number: "))
     	    "Only works when there is a currently open window on the screen"
     	    (select-window-by-number (window-number
     				      (car (head-windows (current-group)
     							 (nth screen-num (group-heads (current-group)))))))
     	    (group-wake-up (current-group)))
   #+end_src
* Keybindings
  #+begin_src lisp
    (set-prefix-key (kbd "C-t"))
  #+end_src
** Keybinding Macros
   #+begin_src lisp
     (defmacro make-program-binding (program-name window-class &optional alias)
       "Create run-or-raise and run-or-pull commands for program-name
     window-class is the windows-class
     Also add keybinding to the commands. 
     C-keybinding r calls run-or-raise
     C-keybinding p calls run-or-pull
     C-keybinding n creates a new instance of the program"
       (if (not alias)
           (setf alias program-name))
       `(progn
          (defvar ,(intern (format nil "*~a-map*" alias)) nil)

          (defcommand ,(intern (format nil "~a" alias)) () () (run-shell-command ,program-name))
          
          (defcommand ,(intern (format nil "run-or-raise-~a" alias)) () ()
     		 (run-or-raise ,program-name '(:class ,window-class)))
          
          (defcommand ,(intern (format nil "run-or-pull-~a" alias)) () ()
     		 (run-or-pull ,program-name '(:class ,window-class)))
          
          (stumpwm::fill-keymap ,(intern (format nil "*~a-map*" alias))
     		  (kbd "p") ,(format nil "run-or-pull-~a" alias)
     		  (kbd "r") ,(format nil "run-or-raise-~a" alias)
     		  (kbd "n") ,(format nil "~a" alias))))
   #+end_src
** Program Bindings
   #+begin_src lisp
     (make-program-binding "firefox" "Firefox")

     (make-program-binding "alacritty" "Alacritty")

     (make-program-binding "emacs" "Emacs" "emacs")

     (make-program-binding "keepassxc" "keepassxc")

     (make-program-binding "steam" "steam")

     (make-program-binding "icedove" "Icedove")
   #+end_src
** Keymaps
*** System Map
    #+begin_src lisp
       ;;; System Command Keymap
      (defparameter *screenshot-map*
          	      (let ((m (make-sparse-keymap)))
          		(define-key m (kbd "f") "screenshot")
          		(define-key m (kbd "s") "screenshot-select")
          		m))

      (defparameter *theme-map*
          	      (let ((m (make-sparse-keymap)))
          		(define-key m (kbd "t") "toggle-theme")
                      m))


      (defparameter *power-map*
          	      (let ((m (make-sparse-keymap)))
          		(define-key m (kbd "p") "shutdown")
          		(define-key m (kbd "r") "reboot")
          		m)) 

      (defparameter *system-map*
                    (let ((m (make-sparse-keymap)))
          		(define-key m (kbd "s") *screenshot-map*)
      		(define-key m (kbd "t") *theme-map*)
          		(define-key m (kbd "p") *power-map*)
      		(define-key m (kbd "r") "reload-init")
          		(define-key m (kbd "v") "volume-control")
          		m))
    #+end_src
*** Program Map
    #+begin_src lisp
      (defparameter *program-map*
      	      (let ((m (make-sparse-keymap)))
      		(define-key m (kbd "f") |*firefox-map*|)
      		(define-key m (kbd "e") |*emacs-map*|)
      		(define-key m (kbd "c") |*alacritty-map*|)
      		(define-key m (kbd "p") |*keepassxc-map*|)
      		(define-key m (kbd "s") |*steam-map*|)
      		(define-key m (kbd "i") |*icedove-map*|)
      		m))
    #+end_src
*** Root Map
    #+begin_src lisp
      (define-key *root-map* (kbd "0") "remove")
      (define-key *root-map* (kbd "1") "only")
      (define-key *root-map* (kbd "2") "vsplit")
      (define-key *root-map* (kbd "3") "hsplit")

      (define-key *root-map* (kbd "F1") "user-switch-to-screen 2")
      (define-key *root-map* (kbd "F2") "user-switch-to-screen 1")
      (define-key *root-map* (kbd "F3") "user-switch-to-screen 0")


      (define-key *root-map* (kbd "p") *program-map*)
      (define-key *root-map* (kbd "s") *system-map*)
    #+end_src
*** Top Map
    #+begin_src lisp
      (define-key *top-map* (kbd "XF86AudioRaiseVolume") "notify-volume-up")
      (define-key *top-map* (kbd "XF86AudioLowerVolume") "notify-volume-down")
      (define-key *top-map* (kbd "XF86AudioMute") "pamixer-toggle-mute")

      (define-key *top-map* (kbd "XF86MonBrightnessUp") "screen-brightness-up")
      (define-key *top-map* (kbd "XF86MonBrightnessDown") "screen-brightness-down")

      (define-key *top-map* (kbd "XF86KbdBrightnessUp") "keyboard-brightness-up")
      (define-key *top-map* (kbd "XF86KbdBrightnessDown") "keyboard-brightness-down")

    #+end_src
* Final Actions
  #+begin_src lisp
    (run-shell-command "dex -a -s $XDG_CONFIG_HOME/autostart/")
  #+end_src
